Program1

Scott a Third class is given the scores of the students. He is the leader of the class. 
His teachers calls him and asks him to call the nth smallest Score secured by the student. 
Help scott solve the problem. 

If no such thing exists print -1. 

input = 47912478
3
output = 4

in the above test case we have 4 as the third smallest score secured by the student.

input = 1111
2
output = -1

in the above test case we dont have any second smallest score secured by the student so output is -1


input = 100
1
output = 0

in the above test case we have 0 as the first smallest score by the student so the output is 0 




import java.util.*;
class Test 
{
public static void main(String args[]) {
Scanner sc=new Scanner(System.in);
String s=sc.next();
TreeMap<Integer,Integer> map=new TreeMap<Integer,Integer>();
 for(int i=0;i<s.length();i++)
      map.put(Integer.parseInt(""+s.charAt(i)), map.getOrDefault(Integer.parseInt(""+s.charAt(i)),0)+1);
 int n= sc.nextInt();
 Set<Integer> keys = map.keySet();
 int count=1;
 for(int key : keys)
	{
	     if(count==n)
			 {
			System.out.print(key);
		    return ;
			}
	count++;
	}
 System.out.print(-1);
 } 
 } 


 back end test cases

 case = 1
 input = 135792468
 5
 output = 5

 case = 2
 input = 1
 2
 output = -1

 case = 3
 input = 100234
 2
 output = 1

 case = 4
 input = 777
 1
 output = 7

 case = 5
 input = 0
 1
 output = 0

 case = 6
 input = 888
 2
 output = -1


Program2

write a  java program to count the GrandChild/Child for given name 

Assume the relations here limit only to child and grandChild only 
all the inputs will be given in lower case characters(a-z) and are valid relations 

the first line of input consists of number of relations followed by child name and fathers name seperated by ',' 
followed by a name. 



Where the first string is "Child", second string is "Father".
If the given name is Father print the count of his children
If the given name is GrandFather print the count of his GrandChildren

Print -1 for any other boundary conditions 

for given input like this

input =
5
kishore,ramesh
dev,gopal
gopal,ramu
srinu,gopal
praveen,ranjit
ramu
output = 2

And given input "ramu" we have to find his no of grandchildren/child
Here "ramu" has one direct child gopal and gopal has 2 children(dev,srinu).
So ramu has 2 grand children dev,srinu. so output is 2

example:2 

input =
5
ranjit,knr
ramesh,pradeep
kittu,ranjit
yogesh,ranjit
praveen,ranjit
knr
output=
3

//given data for knr we need print the count of grand children . 
here knr direct child is ranjit and ranjit has three children   ---- kittu,yogesh,praveen so print 3


input = 
8
a,b
c,b
d,b
f,a
g,a
e,a
m,c
z,d
b
output =
5





import java.util.*;
class Test
{
    public static void main(String []args){
        Map<String,ArrayList<String>> map1=new HashMap<>();
        Scanner sc=new Scanner(System.in);
		int n = sc.nextInt();
        for(int i=0;i<n;i++){
            String[] tmp=sc.next().split(",");
            if(map1.containsKey(tmp[1])){
                ArrayList<String> list=map1.get(tmp[1]);
                list.add(tmp[0]);
                map1.put(tmp[1],list);
            }
            else{
                ArrayList<String> list1=new ArrayList<>();
                list1.add(tmp[0]);
                map1.put(tmp[1],list1);
            }
        }
		
       String key=sc.next();
	int sum=0;
        if(map1.containsKey(key))
	 	{
			    ArrayList<String> son=map1.get(key);
				for(String l1:son)
				{
					if(map1.containsKey(l1))
					sum =sum + map1.get(l1).size();
				}
				if(sum==0)
					System.out.println(map1.get(key).size());
				else
					System.out.println(sum);
		}
		else
			System.out.println(-1);
    }
   }


case = 1
input = 
5
kishore,ramesh
dev,gopal
gopal,ramu
srinu,gopal
praveen,ranjit
ramu
output =
2

case = 2
input = 
8
a,b
c,b
d,b
f,a
g,a
e,a
m,c
z,d
b
output =
5

case = 3
input = 
5
ranjit,knr
ramesh,pradeep
kittu,krishna
yogesh,sridhar
praveen,chaitanya
knr
output =
1

case = 4
input = 
8
a,b
c,b
d,b
f,a
g,a
e,a
m,c
z,d
a
output = 3

case = 5
input = 
8
a,b
c,b
d,b
e,b
f,b
g,b
h,b
i,k
b
output = 7

case = 6
input = 
8
a,b
c,b
d,b
e,b
f,b
g,b
h,b
dddd,a
a
output = 1

case = 7
input = 8
a,b
c,b
d,b
e,b
f,b
g,b
h,b
i,b
abcd
output = -1

case = 8
input = 
12
a,c
b,c
d,a
e,a
f,a
g,a
h,a
i,b
j,b
k,b
l,b
m,b
c
output = 10


Program-3


The bomb grid is filled with danger values, with both positive and negative integers.
positive means you will lose power of grid[i][j], 
negative means you will gain power of grid[i][j].

Naresh wants to cross the bridge, with the minimum loss of power.
He can cross the grid in the following way:
	- He can start at any bomb cell in the first row.
	- He can step on the next bomb cell in the next row that 
	  is either directly below of the current cell or diagonally left/right. 
	- Specifically, the next bomb cell from position grid(i, j) will be grid(i+1,j-1),
	(i + 1, j) , or (i + 1, j + 1) .

Can you help Naresh to lose the minimum power after crossing the bomb grid.

Input Format:
-------------
Line-1: An integer N, size of N*N grid 
Next N lines: N space separated  integers, values in the grid.

Output Format:
--------------
Print an integer, minimum sum of TopDown path.


Sample Input-1:
---------------
3
1 3 2
5 4 6
9 8 7

Sample Output-1:
----------------
12

Explanation:
-------------
Minimum lose of power is as follows:
start from bomb cell	1 -> 4 -> 7
Total lose is 12.


Sample Input-2:
---------------
3
32 10 23
-15 14 -16
19 -18 17

Sample Output-2:
----------------
-24

Explanation:
-------------
Minimum lose of power is as follows:
start from bomb cell	10 -> -16 -> -18
Total lose is -24.

case =1
input =3
1 3 2
5 4 6
9 8 7
output =12

case =2
input =3
32 10 23
-15 14 -16
19 -18 17
output =-24

case =3
input =5
32 -90 -59 -94 84
55 -92 96 64 81
-100 -97 -79 68 -13
-92 -30 -50 94 -95
79 -35 -3 -56 48
output =-409

case =4
input =6
-23 85 73 62 80 16
76 -14 -100 39 93 -91
51 62 70 63 97 10
-15 -25 77 71 60 -5
91 -71 28 20 -4 43
-15 -29 -50 -3 -7 11
output =-132


case = 5
input =3
1 1 1
2 2 2
3 3 3
output =6



import java.util.*;
class FallingPathSum {
    int[][] dp;
    public int minFallingPathSum(int[][] A) {
        dp = new int[A.length][A[0].length];
        for(int i=0;i<A.length;i++){
           for(int j=0;j<A[i].length;j++){
                getMinimum(A,i,j); 
           } 
        }
        int res = Integer.MAX_VALUE;
        for(int a:dp[dp.length-1]){
            if(a<res)res =a;
        }
        return res;
    }
    
    private void getMinimum(int[][] A,int i, int j){
        dp[i][j] = A[i][j];
        if(i==0)return;
        if(i>0 && j==0){
            dp[i][j] += Math.min(dp[i-1][j],dp[i-1][j+1]);
        }else if(i>0 && j==A[i].length-1){
            dp[i][j] += Math.min(dp[i-1][j],dp[i-1][j-1]);
        }else{
            dp[i][j] += Math.min(Math.min(dp[i-1][j],dp[i-1][j-1]),dp[i-1][j+1]);
        }
    }
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int n=sc.nextInt();
		int arr[][]=new int[n][n];
		for(int i=0;i<n;i++)
		for(int j=0;j<n;j++)
			arr[i][j]=sc.nextInt();
		System.out.println(new FallingPathSum().minFallingPathSum(arr));
	}
}